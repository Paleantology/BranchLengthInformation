taxa <- readTaxonData("data/cincta_fas_fuzzy.tsv")

#taxa
morpho <- readDiscreteCharacterData("data/Cincta_RevBayes_Orig_57.nex");
#morpho <- readDiscreteCharacterData("data/Cinctans_for_RevBayes.nex");

moves = VectorMoves();
monitors = VectorMonitors();
n_taxa <- taxa.size();
num_branches <- 2 * n_taxa - 2;
max_age <- 12.1;

fbd_indicator ~ dnCategorical(simplex(1, 1, 1)); # Dirichlet flat prior
moves.append( mvRandomGeometricWalk(fbd_indicator, weight=1/3, tune=FALSE));
fbd_indicator.setValue(3);
timeline1 <- v(max_age);      # Time homogeneous
timeline2 <- v(1.7, 5.7, 10.2, max_age);  # Shift at each stage
timeline3 <- v(0.3, 1.7, 3.3, 5.7, 7.7, 10.2, max_age);  # Shift at each substage
fbd_vec <- v(timeline1, timeline2, timeline3);
timeline := fbd_vec[fbd_indicator];
print(timeline);

for (i in 1:(timeline.size()+1))  {
  speciation_rate[i] ~ dnExponential(1.471);
  moves.append(mvScale(speciation_rate[i], lambda=0.01, weight=5));
  moves.append(mvScale(speciation_rate[i], lambda=0.10, weight=3));
  moves.append(mvScale(speciation_rate[i], lambda=1.00, weight=1));
 # speciation_rate[i]
  turnover[i] ~ dnLnorm(ln(0.945), 0.6564);       # dnUnif(0.9, 1.05);
  moves.append(mvSlide(turnover[i], delta=0.01, weight=5));
  moves.append(mvSlide(turnover[i], delta=0.10, weight=3));
  moves.append(mvSlide(turnover[i], delta=1.00, weight=1));

  extinction_rate[i] := turnover[i]*speciation_rate[i];
  diversification[i] := speciation_rate[i] - extinction_rate[i];

  psi[i] ~ dnExponential(3.892);
  moves.append( mvScale(psi[i], lambda = 0.01) );
  moves.append( mvScale(psi[i], lambda = 0.1) );
  moves.append( mvScale(psi[i], lambda = 1) );
  }

# Proportional Taxon Sampling of Youngest Time Slice
rho <- 0.506; # 'extant' sampling.

# Establish Basal Divergence Time
origin_time ~ dnUnif(8.5, max_age);
moves.append(mvSlide(origin_time, delta=0.01, weight=5));
moves.append(mvSlide(origin_time, delta=0.10, weight=3));
moves.append(mvSlide(origin_time, delta=1.00, weight=1));

fbd_dist = dnFBDP(originAge=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=psi, rho=rho, timeline=timeline, taxa=taxa, condition="sampling");

outgroup = clade("Ctenocystis_utahensis");
ingroup = clade("Gyrocystis_platessa","Gyrocystis_testudiformis","Gyrocystis_cruzae","Gyrocystis_badulesiensis","Gyrocystis_erecta","Progyrocystis_disjuncta","Protocinctus_mansillaensis","Elliptocinctus_barrandei","Elliptocinctus_vizcainoi","Sucocystis_theronensis","Sucocystis_bretoni","Lignanicystis_barriosensis","Undatacinctus_undata","Sucocystis_acrofera","Undatacinctus_quadricornuta","Undatacinctus_melendezi","Asturicystis_jaekeli","Sotocinctus_ubaghsi","Trochocystites_bohemicus","Trochocystoides_parvus","Ludwigicinctus_truncatus","Graciacystis_ambigua","Bohemiacinctus_havliceki");

constraints = v(ingroup);
fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=constraints);


# Setup the fossil tip sampling #
# Use a for loop to create a uniform distribution on the occurrence time for each fossil #
# The boundaries of the uniform distribution are specified in the tsv file #
fossils = fbd_tree.getFossils();
for (i in 1:fossils.size()) {
  t[i] := tmrca(fbd_tree, clade(fossils[i]));
  a_i = fossils[i].getMinAge();
  b_i = fossils[i].getMaxAge();
  F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i);
  F[i].clamp(0);
  }

 # Add a move to sample the fossil times #
moves.append( mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0) );
moves.append(mvFNPR(fbd_tree, weight=15.0));
moves.append(mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0));
moves.append(mvNodeTimeSlideUniform(fbd_tree, weight=40.0));
moves.append(mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0));
num_samp_anc := fbd_tree.numSampledAncestors();
#pruned_fbd_tree := fnPruneTree(fbd_tree, prune=v("Nelegerocystis_ivantzovi","Rozanovicystis_triangularis","Davidocinctus_pembrokensis"));

###########################################
###########################################
#SHDM Model
#source("rjMCMC/SHDM_8.Rev")
#source("rjMCMC/Mk_partitioned.Rev")
#source("rjMCMC/Mk_unpart.Rev")
###########################################

character_indicator ~ dnCategorical(simplex(1,1));
character_indicator.setValue(2);
moves.append( mvRandomGeometricWalk(character_indicator, weight=1/3, tune=FALSE) );

###########################################
###########################################
#ClockModel
source("rjMCMC/model_ACLN.Rev");
source("rjMCMC/model_UCLN.Rev");
source("rjMCMC/model_StCT.Rev");
#source("rjMCMC/model_UCLN_EB.Rev");
###########################################

clock_indicator ~ dnCategorical(simplex(1,1,1));  # simplex with # of different branch rate models;
#clock_indicator ~dnCategorical(simplex(1,1,1));  # simplex with # of different branch rate models;
moves.append(mvRandomGeometricWalk(clock_indicator, weight=10.0, tune=TRUE));
clock_vec := v(acln_rates, ucln_rates, strict_rates);  # We need a vector of branch_rates  could be v(acln_rates,ucln_rates,eb_rates,strict_clock);
#clock_vec := v(acln_rates,ucln_rates,ucln_eb_rates,strict_clock);
clock_indicator.setValue(1)
clock_rates := clock_vec[clock_indicator]


#################################################
# Define the model of among-site rate variation #
#################################################

alpha ~ dnGamma(1E8, 0.5);
moves.append(mvScale(alpha, weight=10.0));
moves.append(mvScale(alpha, weight=10.0));


site_rates := fnDiscretizeGamma(alpha, alpha, 4);
site_rates2 := fnDiscretizeGamma(alpha, alpha, 4);  # If site rate with integer, then unpartitioned; otherwise use partitioned
###########################################

Q_vec := v(site_rates, site_rates2);
s_r := Q_vec[character_indicator];
idx = 1;

n_max_states <- 5;
morpho_bystate[1] <- morpho;
if (character_indicator == 1) {
  for (i in 2:n_max_states) {
    morpho_bystate[i] <- morpho
    morpho_bystate[i].setNumStatesPartition(i)
    nc = morpho_nf_bystate[i].nchar()
  # for non-empty character blocks
    if (nc > 0) {
      morpho_bystate[i]
      Q_one[idx] <- fnJC(i)
      m_morph[idx] ~ dnPhyloCTMC(tree=fbd_tree, Q = Q_one[idx], type="Standard", siteRates=s_r, branchRates = clock_rates);
      m_morph[idx].clamp(morpho_bystate[i])
      i <- i + 1
      idx = idx + 1
      }
    }
  }

if (character_indicator == 2) {
  non_feeding = v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45)
  morpho_f <- morpho;
  morpho_f.excludeCharacter(non_feeding);
  morpho_nf <- morpho;
  feeding = v(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57);
  morpho_nf.excludeCharacter(feeding);

  idx = 1;
  morpho_f_bystate[1] <- morpho_f;
  for (i in 1:n_max_states) {
    morpho_f_bystate[i] <- morpho_f;
    morpho_f_bystate[i].setNumStatesPartition(i);
    nc = morpho_f_bystate[i].nchar();
  # for non-empty character blocks
    if (nc > 0) {
      morpho_f_bystate[i];
      Q_f[idx] <- fnJC(i);
      # create model of evolution for the character block
      m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,Q=Q_f[idx],siteRates=s_r,branchRates = clock_rates,type="Standard");

     # attach the data
      m_morph[idx].clamp(morpho_f_bystate[i])
    # increment counter
      idx = idx + 1
      }
    }
    idx = 1;
    morpho_nf_bystate[1] <- morpho_nf;
    for (i in 1:n_max_states) {
      morpho_nf_bystate[i] <- morpho_nf;
      morpho_nf_bystate[i].setNumStatesPartition(i);
      nc = morpho_nf_bystate[i].nchar();
      # for non-empty character blocks
      if (nc > 0) {
        morpho_nf_bystate[i];
        Q_n[idx] <- fnJC(i);
        # make i-by-i rate matrix
        # create model of evolution for the character block
        m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree, Q=Q_n[idx], siteRates=s_r, branchRates = clock_rates,type="Standard");
        # attach the data
        m_morph[idx].clamp(morpho_nf_bystate[i]);
        # increment countersou
        idx = idx + 1;
        }
     }
  }

mymodel = model(fbd_tree);
mymodel.ignoreAllData()
monitors.append(mnModel(filename="output/UnderPrior_fbd.log", printgen=1000, exclude = v("timeline","F")));
monitors.append(mnFile(filename="output/UnderPrior_fbd.trees", printgen=1000, fbd_tree));
monitors.append(mnScreen(printgen=100, num_samp_anc,fbd_indicator, clock_indicator, character_indicator));
mymcmc = mcmc(mymodel, monitors, moves, nruns = 2);
mymcmc.run(generations=1000000);
mymcmc.operatorSummary()


   q()
