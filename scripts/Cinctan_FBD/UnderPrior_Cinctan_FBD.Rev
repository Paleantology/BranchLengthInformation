taxa <- readTaxonData("data/cincta_fas_fuzzy.tsv")

#taxa
morpho <- readDiscreteCharacterData("data/Cincta_RevBayes_Orig_57.nex");

moves = VectorMoves();
monitors = VectorMonitors();
n_taxa <- taxa.size();
num_branches <- 2 * n_taxa - 2;
max_age <- 12.1;

timeline <- v(1.7, 5.7, 10.2, max_age);  # Shift at each stage

for (i in 1:(timeline.size()+1))  {
  speciation_rate[i] ~ dnExponential(10);
  moves.append(mvScale(speciation_rate[i], lambda=0.01, weight=5));
  moves.append(mvScale(speciation_rate[i], lambda=0.10, weight=3));
  moves.append(mvScale(speciation_rate[i], lambda=1.00, weight=1));
 # speciation_rate[i]
  #dnUnif(0.9, 1.05);
 # turnover[i] ~ dnLognormal(0.945, 1.926745);
  turnover[i] ~ dnUnif(0.9, 1.05)
  moves.append(mvSlide(turnover[i], delta=0.01, weight=5));
  moves.append(mvSlide(turnover[i], delta=0.10, weight=3));
  moves.append(mvSlide(turnover[i], delta=1.00, weight=1));

  extinction_rate[i] := turnover[i]*speciation_rate[i];
  diversification[i] := speciation_rate[i] - extinction_rate[i];

  psi[i] ~ dnExponential(10);
  moves.append( mvScale(psi[i], lambda = 0.01) );
  moves.append( mvScale(psi[i], lambda = 0.1) );
  moves.append( mvScale(psi[i], lambda = 1) );
  }

# Proportional Taxon Sampling of Youngest Time Slice
rho <- 0.506; # 'extant' sampling.

# Establish Basal Divergence Time
origin_time ~ dnUnif(7.3, 12.11);
moves.append(mvSlide(origin_time, delta=0.01, weight=5));
moves.append(mvSlide(origin_time, delta=0.10, weight=3));
moves.append(mvSlide(origin_time, delta=1.00, weight=1));

fbd_dist = dnFBDP(originAge=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=psi, rho=rho, timeline=timeline, taxa=taxa, condition="sampling");

outgroup = clade("Ctenocystis_utahensis");
ingroup = clade("Gyrocystis_platessa","Gyrocystis_testudiformis","Gyrocystis_cruzae","Gyrocystis_badulesiensis","Gyrocystis_erecta","Progyrocystis_disjuncta","Protocinctus_mansillaensis","Elliptocinctus_barrandei","Elliptocinctus_vizcainoi","Sucocystis_theronensis","Sucocystis_bretoni","Lignanicystis_barriosensis","Undatacinctus_undata","Sucocystis_acrofera","Undatacinctus_quadricornuta","Undatacinctus_melendezi","Asturicystis_jaekeli","Sotocinctus_ubaghsi","Trochocystites_bohemicus","Trochocystoides_parvus","Ludwigicinctus_truncatus","Graciacystis_ambigua","Bohemiacinctus_havliceki");

constraints = v(ingroup);
fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=constraints);
fbd_tree
# Setup the fossil tip sampling #
# Use a for loop to create a uniform distribution on the occurrence time for each fossil #
# The boundaries of the uniform distribution are specified in the tsv file #
fossils = fbd_tree.getFossils();
for (i in 1:fossils.size()) {
  t[i] := tmrca(fbd_tree, clade(fossils[i]));
  a_i = fossils[i].getMinAge();
  b_i = fossils[i].getMaxAge();
  F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i);
  F[i].clamp(0);
  }

 # Add a move to sample the fossil times #
moves.append( mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0) );
moves.append(mvFNPR(fbd_tree, weight=15.0));
moves.append(mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0));
moves.append(mvNodeTimeSlideUniform(fbd_tree, weight=40.0));
moves.append(mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0));
num_samp_anc := fbd_tree.numSampledAncestors();
#pruned_fbd_tree := fnPruneTree(fbd_tree, prune=v("Nelegerocystis_ivantzovi","Rozanovicystis_triangularis","Davidocinctus_pembrokensis"));

###########################################
###########################################
#ClockModel
source("scripts/Cinctan_FBD/model_UCLN.Rev");
###########################################

#################################################
# Define the Morphology Model                   #
#################################################

source("scripts/Cinctan_FBD/model_Morph.Rev");

mymodel = model(fbd_tree);
mymodel.ignoreAllData()
monitors.append(mnModel(filename="output/UP_fbd.log", printgen=1000, exclude = v("timeline","F")));
monitors.append(mnFile(filename="output/UP_fbd.trees", printgen=1000, fbd_tree));
monitors.append(mnScreen(printgen=100, num_samp_anc));
mymcmc = mcmc(mymodel, monitors, moves, nruns = 2);
mymcmc.run(generations=100000);
mymcmc.operatorSummary()


q()
