morpho <- readDiscreteCharacterData("data/Cincta_RevBayes_Orig_57.nex")


taxa <- morpho.names()
num_taxa <- morpho.size()
num_branches <- 2 * num_taxa - 3

moves = VectorMoves()
monitors = VectorMonitors()

TL ~ dnGamma(2,4)
moves.append( mvScale(TL) )

rel_branch_lengths ~ dnDirichlet( rep(1.0,num_branches) )
moves.append( mvBetaSimplex(rel_branch_lengths, weight=num_branches) )
moves.append( mvDirichletSimplex(rel_branch_lengths, weight=num_branches/10.0) )
br_lens := rel_branch_lengths * TL

t ~ dnUniformTopology(taxa)
phylogeny := treeAssembly(t, br_lens)
moves.append(mvNNI(t, weight=num_branches/2.0))
moves.append(mvSPR(t, weight=num_branches/10.0))

tree_length := phylogeny.treeLength()
alpha_morpho ~ dnUniform( 0, 1E6 )
rates_morpho := fnDiscretizeDistribution( dnLognormal(ln(alpha_morpho), 0.01), 4 ) #Moves on the parameters of the Gamma distribution.
moves.append(mvScale(alpha_morpho, lambda=1, weight=2.0))

n_max_states <- 6
idx = 1
morpho_bystate[1] <- morpho
for (i in 2:n_max_states) {
  # make local tmp copy of data
  # only keep character blocks with state space equal to size i
  morpho_bystate[i] <- morpho
  morpho_bystate[i].setNumStatesPartition(i)
  # get number of characters per character size wth i-sized states
  nc = morpho_bystate[i].nchar()
  # for non-empty character blocks
  if (nc > 0) {
    # make i-by-i rate matrix
    q[idx] <- fnJC(i)
    # create model of evolution for the character block
    m_morph[idx] ~ dnPhyloCTMC( tree=phylogeny,
                                Q=q[idx],
                                nSites=nc,
                                siteRates=rates_morpho,
                                type="Standard")
    
    # attach the data
    m_morph[idx].clamp(morpho_bystate[i])
    
    # increment counter
    idx = idx + 1
    idx
  }
}
mymodel = model(phylogeny)
mymodel.ignoreAllData()

monitors.append( mnModel(filename="output/underPrior_cinct_Dir_undated.log", printgen=10))
monitors.append( mnFile(filename="output/underPrior_cinct_Dir_undated.trees", printgen=10, phylogeny))
monitors.append(mnScreen(printgen=100))


mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")
mymcmc.run(generations=1000000, tuningInterval=200)



trace = readTreeTrace("output/underPrior_cinct_Dir_undated.trees")
mccTree(trace, file = "output/underPrior_cinct_Dir_undated.mccTree.tre")
conTree(trace, file = "output/underPrior_cinct_Dir_undated.conTree.tre")

q()